---
import CallToAction from "@/components/sections/CallToAction.astro";
import Base from "@/layouts/Base.astro";
import LayoutWrapper from "@/components/LayoutWrapper.astro";

export async function getStaticPaths() {
  const strapiUrl = import.meta.env.PUBLIC_STRAPI_API_URL || "http://localhost:1337";
  const res = await fetch(`${strapiUrl}/api/posts`);
  const { data: posts } = await res.json();

  return posts.map((post: any) => ({
    params: { lang: undefined, single: post.slug },
  }));
}


const { single } = Astro.params as { single: string };
const strapiUrl = import.meta.env.PUBLIC_STRAPI_API_URL || "http://localhost:1337";
const res = await fetch(`${strapiUrl}/api/posts?filters[slug][$eq]=${single}&populate=*`);
const { data } = await res.json();
const postData = data[0];

if (!postData) {
  throw new Error(`Post not found for slug: ${single}`);
}

function resolveImageUrl(coverImage: any, strapiUrl: string): string {
  if (!coverImage) return '/images/default-blog.jpg';
  if (coverImage.formats?.small?.url) { return strapiUrl + coverImage.formats.small.url }
  if (coverImage.url) return strapiUrl + coverImage.url;
  return '/images/default-blog.jpg';
}

const post = {
  id: postData.id,
  title: postData.title,
  slug: postData.slug,
  publishedAt: new Date(postData.publishedAt).toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric',}),
  author: postData.author?.name,
  authorObject:  {
    title: postData.author.name || '',  
    image: postData.author?.image?.url ? `${strapiUrl}${postData.author.image.url}` : "",
    role: postData.author.role || '',
  },
  categories: postData.categories?.map((cat: { name: string }) => cat.name) || [],
  excerpt: postData.content?.[0]?.children?.[0]?.text?.slice(0, 150) + '...' || '',
  image: resolveImageUrl(postData.coverImage, strapiUrl),
  contentBlocks: postData.content || [],
};

---

<Base {...post}>
  <LayoutWrapper
    sidebar={{
      enable: false,
      sticky: true,
    }}
    content={post}
    boxShadow={false}
  />
  <CallToAction />
</Base>
